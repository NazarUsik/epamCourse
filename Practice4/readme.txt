Практическое занятие №4
_______________________

Замечания.
1. Если приложение считывает информацию из файла, то необходимо указать кодировку, в которой она записана. Использовать кодировку Cp1251.
2. Если явно не указан язык, на котором записана входная текстовая информация, то использовать текст на языке, который содержит кириллицу (русский, украинский языки) и латиницу (английский язык).
3. В корневом пакете создать класс Demo, который демонстрирует работу всего написанного функционала.
4. Имена входных и выходных файлов указаны относительно корневого каталога проекта.
5. Обязательно посмотреть в лог сборки проекта (Jenkins), вывод должен совпадать с тем выводом, который получается на вашей локальной машине.
6. При выводе информации используйте ограничитель строки, получаемый динамически (System.lineSeparator).
7. Не используйте абсолютные адреса файлов, задавайте относительные пути от корня проекта, иначе проект не будет собран.
8. Timeoute сборки проекта в Jenkins 2 минуты. Если при сборке проекта будет вызвана функциональность ожидания консольного ввода, то максимум через 2 минуты проект будет снят с выполнения, а сама сборка помечена как Aborted.
9. Если Jenkins не собирает проект по причине выброса IllegalAccessError с сообщением "tried to access class XXX" поставьте уровень доступа типа с именем XXX в public.

_______________________

Задание 1
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part1
Входную информацию загружать из файла part1.txt
-------------------------------------------------------

Создать класс, который выводит содержимое текстового файла в консоль, инвертируя регистр всех символов каждого слова, которое содержит более 3 символов.
Файл брать размером не более 1 Кб (достаточно несколько строк).
Под словом понимать непрерывную последовательность символов латиницы или кириллицы.

_______________________

Задание 2
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part2
Входную информацию загружать из файла part2.txt
Выходную информацию загружать в файл part2_sorted.txt
-------------------------------------------------------

Создать класс, который создает и заполняет файл part2.txt случайными целыми числами от 0 до 50 (всего 10 чисел), затем читает файл и выводит его содержимое в другой файл part2_sorted.txt, отсортировав числа по возрастанию.
Файл part2.txt создавать только если он не существует. 
Содержимое обоих файлов (числа разделенные пробелом) вывести в консоль.

Для сортировки написать собственный метод, который осуществляет сортировку некоторым алгоритмом (например "пузырьком"). Выходной файл должен быть текстовым (читабельным).
Вывести содержимое входного и выходного файла в консоль.

Пример консольного вывода
-------------------------------------------------------
input  ==> 30 23 16 16 9 23 3 18 21 29
output ==> 3 9 16 16 18 21 23 23 29 30
-------------------------------------------------------

_______________________

Задание 3
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part3
Входную информацию загружать из файла part3.txt
-------------------------------------------------------

Файл содержит символы, слова, целые числа и числа с плавающей точкой. Написать класс, который имеет следующую функциональность: в цикле пользователь вводит тип данных (один из: char, String, int, double), в ответ приложение печатает в консоль все значения соответствующих типов, которые существуют в файле.
Если таких значений нет, то приложение должно печать сообщение "No such values"
Если пользователь вводит слово stop, то происходит выход из цикла.
Если пользователь вводит что-либо отличное от String, int, double, stop, то приложение должно печатать сообщение "Incorrect input".

Задачу решить с использованием регулярных выражений.

Замечание: под строкой понимать последовательность символов два и более. Символы - латинские или кириллические буквы в верхнем или нижнем регистре (обязательно предусмотреть наличие кириллицы во входном файле).

Пример исходного файла:
-------------------------------------------------------
a bcd 43.43 432 
и л фыва 89 .98
-------------------------------------------------------

Пример содержимого консоли:
-------------------------------------------------------
char<Enter>
a и л 
String<Enter>
bcd фвыа 
string<Enter>
Incorrect input
int<Enter>
432 89 
double<Enter>
43.43 .98 
stop<Enter>
-------------------------------------------------------

_______________________

Задание 4
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part4
Входную информацию загружать из файла part4.txt
-------------------------------------------------------

Создать класс, который реализует интерфейс java.lang.Iterable<String>. Класс должен разбирать текстовый файл и возвращать предложения из файла. Метод iterator данного класса должен возвращать объект итератор - экземпляр внутреннего класса. Метод Iterator#remove должен бросать исключение UnsupportedOperationException.

Не допускается использовать существующие реализации итераторов из контейнерных классов!

Замечание. Напишите регулярное выражение, которое "вырезает" предложения из текста, далее используйте объект Matcher при реализации методов интерфейса Iterator.

_______________________

Задание 5
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part5
Входной пакет ресурсов, локаль ru: resources_ru.properties
Входной пакет ресурсов, локаль en: resources_en.properties
Пакеты ресурсов расположить непосредственно в каталоге src
-------------------------------------------------------

Создать пакеты ресурсов (properties файлы) для двух локалей: ru и en. Пакеты содержат как минимум две записи.

Пример содержимого resources_en.properties
-------------------------------------------------------
table = table
apple = apple
-------------------------------------------------------

Пример содержимого resources_ru.properties
-------------------------------------------------------
table = стол
apple = яблоко
-------------------------------------------------------

Написать класс, который в цикле читает с консоли ключ (key) и имя локализации через пробел, в ответ печатает соответствующее значение в консоль. Признаком окончания ввода служит слово stop.

Если по введенной локали и ключу значение не может быть получено, то приложение должно печатать сообщение: "No such value".

Чтение из консоли и запись в консоль являются обязательными!

Пример содержимого консоли:
-------------------------------------------------------
table ru<Enter>
стол
table en<Enter>
table
asdf en<Enter>
No such values
apple ru<Enter>
яблоко
apple en<Enter>
apple
asdf en<Enter>
No such values
stop<Enter>
-------------------------------------------------------

_______________________

Задание 6
-------------------------------------------------------
Название класса: ua.nure.your_last_name.practice4.Part6
Входной файл part6.txt
-------------------------------------------------------

Файл содержит слова, записанные кириллицей и латиницей.
Написать класс, который имеет следующую функциональность.
Если пользователь вводит в консоли
1) Latn (или latn) - приложение печатает в консоль все слова, записанные с применением латиницы;
2) Cyrl (или cyrl) - приложение печатает в консоль все слова, записанные с применением кириллицы;
3) Stop (или stop) - приложение завершает свою работу;
4) любой другой ввод влечет появление сообщения Incorrect input


Пример входного файла:
-------------------------------------------------------
Is there anybody going to listen to my story
Лягає день. Він віддає свої надії ночі.
С барабаном ходит ёжик. Бум-бум-бум.
-------------------------------------------------------

Пример содержимого консоли:
-------------------------------------------------------
asdf<Enter>
asdf: Incorrect input
Latn<Enter>
Latn: Is there anybody going to listen to my story
Cyrl<Enter>
Cyrl: Лягає день Він віддає свої надії ночі С барабаном ходит ёжик Бум бум бум
latn<Enter>
latn: Is there anybody going to listen to my story
Stop
-------------------------------------------------------
_______________________

Содержимое класса Demo

В корневом пакете (ua.nure.your_last_name.practice4) должен находится класс Demo, который демонстрирует работу всего функционала.
Для тех подзадач, которые требуют ввода с консоли, переназначить стандартный поток ввода таким образом, чтобы ввод осуществлялся из некоторой заданной строки (после отрабатывания вашего кода необходимо предусмотреть восстановление стандартных потоков).

Demo.main должен отрабатывать без участия пользователя, никакого ожидания ввода с консоли при выполнении данного метода быть не должно. Пример переназначений см. в заглушке.

Если приложение на стенде зависнет в ожидании ввода с консоли, то не более чем через 2 минуты оно будет снято с выполнение (на все задачи выставлен timeout).

Пример метода Demo.main
-------------------------------------------------------
package ua.nure.your_last_name.practice4;

import java.io.*;
import ua.nure.your_last_name.practice4.*;

public class Demo {
    private static final InputStream STD_IN = System.in;

    public static void main(String[] args) {
        System.out.println("=========================== PART1");
        Part1.main(args);

        System.out.println("=========================== PART2");
        Part2.main(args);

        System.out.println("=========================== PART3");
        // set the mock input
        System.setIn(new ByteArrayInputStream(
                "char^String^int^double^stop".replace("^", System.lineSeparator()).getBytes()));
        Part3.main(args);
        // restore the standard input
        System.setIn(STD_IN);

        System.out.println("=========================== PART4");
        Part4.main(args);

        System.out.println("=========================== PART5");
        // set the mock input
        System.setIn(new ByteArrayInputStream(
                "table ru^table en^apple ru^stop".replace("^", System.lineSeparator()).getBytes()));
        Part5.main(args);
        // restore the standard input
        System.setIn(STD_IN);
		
	    System.out.println("=========================== PART6");
        // set the mock input
        System.setIn(new ByteArrayInputStream(
                "Latn^Cyrl^asdf^latn^cyrl^stop".replace("^", System.lineSeparator()).getBytes()));
        Part6.main(args);
        // restore the standard input
        System.setIn(STD_IN);
    }
}
-------------------------------------------------------