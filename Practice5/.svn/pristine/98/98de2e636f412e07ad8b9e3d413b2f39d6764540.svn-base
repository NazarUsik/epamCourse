package ua.nure.usik.practice5;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.Files;

public class Part5 {
    private static final int N = 10;

    private static class ThreadWriter {
        private static RandomAccessFile fileWorker;
        private static int capacity;
        private Thread[] workers;

        static {
            try {
                File file = new File("part5.txt");
                Files.delete(file.toPath());
                fileWorker = new RandomAccessFile(file, "rw");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public ThreadWriter(int k) {
            capacity = k;
            this.workers = new Worker[k];
            int number = 0;

            for (int i = 0; i < workers.length; i++) {
                if(number > 9){
                    number = 0;
                }
                workers[i] = new Worker(i, number++);
            }
        }

        private static class Worker extends Thread {
            private static int N = 20;
            private int pointer;
            private int number;


            public Worker(int pointer, int number) {
                this.number = number;
                this.pointer = pointer * (N + 1);
            }

            private void write() throws IOException {

                for (int i = 0; i < N; i++) {
                    fileWorker.seek(pointer + i);
                    fileWorker.writeBytes(String.valueOf(number));
                }

                //System.out.println(Thread.currentThread().getName());
                if (pointer/(N+1) != capacity - 1) {
                    fileWorker.seek(pointer + N);
                    fileWorker.writeBytes("\n");
                }

                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }

            @Override
            public void run() {
                try {
                    write();
                } catch (IOException e) {
                    System.out.println("Error in RUN!");
                    e.printStackTrace();
                }
            }
        }

        public void start() throws InterruptedException {
            for (Thread w : workers) {
                w.start();
                w.join();
            }
        }

        public String readFile() throws IOException {
            StringBuilder builder = new StringBuilder();

            fileWorker.seek(0);
            String str = fileWorker.readLine();

            while(str != null){
                builder.append(str).append('\n');
                str = fileWorker.readLine();
            }


            fileWorker.close();

            return builder.toString().trim();
        }
    }


    public static void main(String[] s) {
        ThreadWriter writer = new ThreadWriter(N);
        try {
            writer.start();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }


        try {
            System.out.print(writer.readFile());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
